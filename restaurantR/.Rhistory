install.packages("qpdf")
getKidsFriendlyRestaurants<-function(city, cuisine, full = FALSE ){
city = gsub(" ","+",city)
factualAPIKey = "mKxC6I9lTWnKNTSNF12e3keaWblCXqoaZ1qROdVo"
baseURL <- "http://api.v3.factual.com/t/restaurants-us?"
USfilter="{\"country\":\"US\"}"
cityFilter = paste0("{\"locality\":{\"$eq\":\"",city,"\"}}")
kidsFilter = "{\"kids_goodfor\":{\"$eq\":\"TRUE\"}}"
cuisineFilter = paste0("{\"cuisine\":{\"$includes\":\"",cuisine,"\"}}")
allFilters=paste(cityFilter,kidsFilter,cuisineFilter,sep = ",")
filters=paste0("{\"$and\":[",allFilters,"]}")
limit=20
offset=0
URL = paste0(baseURL,"filters=",filters,"&KEY=",factualAPIKey)
getData=fromJSON(URL, flatten = TRUE)
fullFactualResponse = as.data.frame(getData$response)
nameLatLong = data.frame(name=df1$data.name,longitude=as.double(df1$data.longitude),latitude=as.double(df1$data.latitude))
if(full)
fullFactualResponse
else
nameLatLong
}
getKidsFriendlyRestaurants("New York","Thai")
source('~/GitHub/stats290/restaurantR/R/getKidsFriendlyRestaurants.R')
getKidsFriendlyRestaurants("New York","Thai")
source('~/GitHub/stats290/restaurantR/R/getKidsFriendlyRestaurants.R')
source('~/GitHub/stats290/restaurantR/R/getKidsFriendlyRestaurants.R')
getKidsFriendlyRestaurants("New York","Thai")
b=getKidsFriendlyRestaurants("New York","Thai")
source('~/GitHub/stats290/restaurantR/R/plotBusinesses.R')
plotBusinesses("New York",b)
source('~/GitHub/stats290/restaurantR/R/plotBusinesses.R')
plotBusinesses("New York",b)
source('~/GitHub/stats290/restaurantR/R/plotBusinesses.R')
source('~/GitHub/stats290/restaurantR/R/getKidsFriendlyRestaurants.R')
source('~/GitHub/stats290/restaurantR/R/getKidsFriendlyRestaurants.R')
source('~/GitHub/stats290/restaurantR/R/getKidsFriendlyRestaurants.R')
getKidsFriendlyRestaurants("Bellevue","Indian",TRUE)
b=getKidsFriendlyRestaurants("Bellevue","Indian",TRUE)
names(b)
names(b) = paste(names(b),"l"
)
names(b)
b=getKidsFriendlyRestaurants("Bellevue","Indian",TRUE)
b
names(b)
unlist(strsplit(names(b), split=',', fixed=TRUE))[2]
unlist(strsplit(names(b), split=',', fixed=TRUE))[2,]
unlist(strsplit(names(b), split=',', fixed=TRUE))[,2]
unlist(strsplit(names(b), split=',', fixed=TRUE))
unlist(strsplit(names(b), split='.', fixed=TRUE))
names(b) <- sub("data", "\\2", names(b))
names(b)
source('~/GitHub/stats290/restaurantR/R/getKidsFriendlyRestaurants.R')
source('~/GitHub/stats290/restaurantR/R/getKidsFriendlyRestaurants.R')
b=getKidsFriendlyRestaurants("Bellevue","Indian",TRUE)
b
source('~/GitHub/stats290/restaurantR/R/getKidsFriendlyRestaurants.R')
source('~/GitHub/stats290/restaurantR/R/getKidsFriendlyRestaurants.R')
b=getKidsFriendlyRestaurants("Bellevue","Indian",TRUE)
names(b)
source('~/GitHub/stats290/restaurantR/R/getKidsFriendlyRestaurants.R')
source('~/GitHub/stats290/restaurantR/R/getKidsFriendlyRestaurants.R')
source('~/GitHub/stats290/restaurantR/R/getKidsFriendlyRestaurants.R')
library(restaurantR)
getKidsFriendlyRestaurants("Indian","redm")
city="Atlanta"
cuisine="ii"
city = gsub(" ","+",city)
factualAPIKey = "mKxC6I9lTWnKNTSNF12e3keaWblCXqoaZ1qROdVo"
baseURL <- "http://api.v3.factual.com/t/restaurants-us?"
USfilter="{\"country\":\"US\"}"
cityFilter = paste0("{\"locality\":{\"$eq\":\"",city,"\"}}")
kidsFilter = "{\"kids_goodfor\":{\"$eq\":\"TRUE\"}}"
cuisineFilter = paste0("{\"cuisine\":{\"$includes\":\"",cuisine,"\"}}")
allFilters=paste(cityFilter,kidsFilter,cuisineFilter,sep = ",")
filters=paste0("{\"$and\":[",allFilters,"]}")
limit=20
offset=0
URL = paste0(baseURL,"filters=",filters,"&KEY=",factualAPIKey)
getData=jsonlite::fromJSON(URL, flatten = TRUE)
getData
source('~/GitHub/stats290/restaurantR/R/compareChainsByState.R')
source('~/GitHub/stats290/restaurantR/R/getQueryCountbyState.R')
source('~/GitHub/stats290/restaurantR/R/getQueryCountbyState.R')
source('~/GitHub/stats290/restaurantR/R/getQueryCountbyState.R')
source('~/GitHub/stats290/restaurantR/R/getQueryCountbyState.R')
source('~/GitHub/stats290/restaurantR/R/getQueryCountbyState.R')
source('~/GitHub/stats290/restaurantR/R/getQueryCountbyState.R')
getCountbyUSState("Chipotle")
source('~/GitHub/stats290/restaurantR/R/getQueryCountbyState.R')
getCountbyUSState("Chipotle")
source('~/GitHub/stats290/restaurantR/R/getQueryCountbyState.R')
getCountbyUSState("Chipotle")
source('~/GitHub/stats290/restaurantR/R/getQueryCountbyState.R')
source('~/GitHub/stats290/restaurantR/R/getQueryCountbyState.R')
source('~/GitHub/stats290/restaurantR/R/getQueryCountbyState.R')
source('~/GitHub/stats290/restaurantR/R/getQueryCountbyState.R')
source('~/GitHub/stats290/restaurantR/R/getQueryCountbyState.R')
getCountbyUSState("Indian")
source('~/GitHub/stats290/restaurantR/R/getQueryCountbyState.R')
source('~/GitHub/stats290/restaurantR/R/getQueryCountbyState.R')
getCountbyUSState("Pizza hut")
source('~/GitHub/stats290/restaurantR/R/getQueryCountbyState.R')
getCountbyUSState("Pizza hut")
source('~/GitHub/stats290/restaurantR/R/getQueryCountbyState.R')
getCountbyUSState("Pizza hut")
source('~/GitHub/stats290/restaurantR/R/getQueryCountbyState.R')
getCountbyUSState("Pizza hut")
getCountbyUSState("Seattle Best")
getCountbyUSState("Anjappar")
library(plyr)
query1="Subway"
query2="Chipotle"
df1 <- getCountbyUSState(query1)
df2 <- getCountbyUSState(query2)
df1
df2
source('~/GitHub/stats290/restaurantR/R/compareChainsByState.R')
compare = cbind(df1, df2)
compare
ifelse(compare[1,] > compare[2,],query1, query2)
source('~/GitHub/stats290/restaurantR/R/compareChainsByState.R')
ifelse(compare[,1] > compare[,2],query1, query2)
t(ifelse(compare[,1] > compare[,2],query1, query2))
ifelse(compare[,1] > compare[,2],query1, query2)
source('~/GitHub/stats290/restaurantR/R/compareChainsByState.R')
source('~/GitHub/stats290/restaurantR/R/compareChainsByState.R')
compareChainsByState("Quiznos","Einstein")
source('~/GitHub/stats290/restaurantR/R/compareChainsByState.R')
source('~/GitHub/stats290/restaurantR/R/compareChainsByState.R')
source('~/GitHub/stats290/restaurantR/R/compareQueriesByState.R')
source('~/GitHub/stats290/restaurantR/R/compareQueriesByState.R')
compareQueriesByState("Pizza Hut","Dominoe's)
"
)
source('~/GitHub/stats290/restaurantR/R/compareQueriesByState.R')
compareQueriesByState("Pizza Hut","Dominoe's")
source('~/GitHub/stats290/restaurantR/R/compareQueriesByState.R')
source('~/GitHub/stats290/restaurantR/R/getQueryCountbyState.R')
source('~/GitHub/stats290/restaurantR/R/plotQueryComparisonByState.R')
plotChainComparisonByState("Dominoe's","Pizza Hut")
source('~/GitHub/stats290/restaurantR/R/plotQueryComparisonByState.R')
Winner = compareChainsByState(query1, query2)
Winner
query1="Dominoe's"
query2="Pizza Hut"
Winner = compareChainsByState(query1, query2)
Winner
color <- ifelse(Winner==query1,"red","green")
color
mydf = as.data.frame(Winner)
mydf$color=color
states <- data.frame(region = tolower(state.name),latitude=state.center$y,longitude=state.center$x)
rownames(states) <-state.abb
chainDataWithLatLong = cbind(states,mydf)
us_state_map <- map_data('state')
finalData <- merge(chainDataWithLatLong, us_state_map, by = 'region')
displayMap <- ggplot(data = finalData, aes(x = long, y = lat, group = group))
displayMap <- displayMap + geom_polygon(aes(fill = color), show.legend = FALSE)
displayMap <- displayMap + geom_path(colour = 'goldenrod1', linemitre  = 2)
displayMap <- displayMap + coord_map()
displayMap <- displayMap + geom_text(data = chainDataWithLatLong, aes(x = longitude, y = latitude, label = Winner, group=NULL, fontface = "bold"))
displayMap <- displayMap + theme_bw()
displayMap
source('~/GitHub/stats290/restaurantR/R/plotQueryComparisonByState.R')
source('~/GitHub/stats290/restaurantR/R/plotQueryComparisonByState.R')
source('~/GitHub/stats290/restaurantR/R/plotQueryComparisonByState.R')
finalData <- merge(chainDataWithLatLong, us_state_map, by = 'region')
displayMap <- ggplot(data = finalData, aes(x = long, y = lat, group = group))
displayMap <- displayMap + geom_polygon(aes(fill = color), show.legend = FALSE)
displayMap <- displayMap + geom_path(colour = 'goldenrod1', linemitre  = 2)
displayMap <- displayMap + coord_map()
displayMap <- displayMap + geom_text(data = chainDataWithLatLong,
aes(x = longitude, y = latitude, label = Winner, group=NULL, fontface = "bold"),
check_overlap = TRUE)
displayMap <- displayMap + theme_bw()
displayMap
source('~/GitHub/stats290/restaurantR/R/plotQueryComparisonByState.R')
source('~/GitHub/stats290/restaurantR/R/plotQueryComparisonByState.R')
source('~/GitHub/stats290/restaurantR/R/plotQueryComparisonByState.R')
source('~/GitHub/stats290/restaurantR/R/plotQueryComparisonByState.R')
source('~/GitHub/stats290/restaurantR/R/plotQueryComparisonByState.R')
source('~/GitHub/stats290/restaurantR/R/plotQueryComparisonByState.R')
source('~/GitHub/stats290/restaurantR/R/plotQueryComparisonByState.R')
source('~/GitHub/stats290/restaurantR/R/plotQueryComparisonByState.R')
?aes
library(restaurantR)
source('~/GitHub/stats290/restaurantR/R/getQueryCountByState.R')
source('~/GitHub/stats290/restaurantR/R/compareQueriesByState.R')
library(restaurantR)
?map_data
?theme_bw
source('~/GitHub/stats290/restaurantR/R/plotQueryComparisonByState.R')
?coord_map
?merge
source('~/GitHub/stats290/restaurantR/R/plotQueryComparisonByState.R')
source('~/GitHub/stats290/restaurantR/R/plotQueryComparisonByState.R')
source('~/GitHub/stats290/restaurantR/R/getQueryCountByState.R')
source('~/GitHub/stats290/restaurantR/R/getQueryCountByState.R')
source('~/GitHub/stats290/restaurantR/R/compareQueriesByState.R')
source('~/GitHub/stats290/restaurantR/R/compareQueriesByState.R')
source('~/GitHub/stats290/restaurantR/R/plotQueryComparisonByState.R')
source('~/GitHub/stats290/restaurantR/R/plotQueryComparisonByState.R')
source('~/GitHub/stats290/restaurantR/R/plotQueryComparisonByState.R')
source('~/GitHub/stats290/restaurantR/R/plotQueryComparisonByState.R')
plotQueryComparisonByState("Indian","Chinese")
source('~/GitHub/stats290/restaurantR/R/plotQueryComparisonByState.R')
plotQueryComparisonByState("Thai","Chinese")
plotQueryComparisonByState("Thai","Vietnamese")
source('~/GitHub/stats290/restaurantR/R/plotQueryComparisonByState.R')
plotQueryComparisonByState("Thai","Italian")
plotQueryComparisonByState("Burger","Pizza")
plotQueryComparisonByState("Sandwich","Pizza")
plotQueryComparisonByState("Sandwich","Burger")
plotQueryComparisonByState("Thai","Indian")
plotQueryComparisonByState("Falafel","Noodles")
plotQueryComparisonByState("Falafel","Pho")
plotQueryComparisonByState("Dosa","Pho")
plotQueryComparisonByState("Dosa","Naan")
plotQueryComparisonByState("Pho","Naan")
plotQueryComparisonByState("Dosa","Naan")
source('~/GitHub/stats290/restaurantR/R/plotQueryComparisonByState.R')
factualAPIKey
source('~/GitHub/stats290/restaurantR/R/getAlcoholFriendlyRestaurants.R')
getAlcoholFriendlyRestaurants("Redmond")
getAlcoholFriendlyRestaurants("New York")
getAlcoholFriendlyRestaurants("New York","Redmond")
source('~/GitHub/stats290/restaurantR/R/getAlcoholFriendlyRestaurants.R')
source('~/GitHub/stats290/restaurantR/R/getAlcoholFriendlyRestaurants.R')
getAlcoholFriendlyRestaurants("New York")
getAlcoholFriendlyRestaurants("Mountain View","Indian")
source('~/GitHub/stats290/restaurantR/R/getAlcoholFriendlyRestaurants.R')
getAlcoholFriendlyRestaurants("Mountain View","Indian")
b=getAlcoholFriendlyRestaurants("Mountain View","Indian")
plotBusinesses("Mountain View",b)
b=getAlcoholFriendlyRestaurants("Mountain View","")
getAlcoholFriendlyRestaurants("Mountain View","")
source('~/GitHub/stats290/restaurantR/R/getAlcoholFriendlyRestaurants.R')
b=getAlcoholFriendlyRestaurants("Mountain View","")
plotBusinesses("Mountain View",b)
source('~/GitHub/stats290/restaurantR/R/plotBusinesses.R')
plotBusinesses("Mountain View",b)
source('~/GitHub/stats290/restaurantR/R/plotBusinesses.R')
plotBusinesses("Mountain View",b)
source('~/GitHub/stats290/restaurantR/R/plotBusinesses.R')
source('~/GitHub/stats290/restaurantR/R/plotBusinesses.R')
source('~/GitHub/stats290/restaurantR/R/plotBusinesses.R')
source('~/GitHub/stats290/restaurantR/R/plotBusinesses.R')
plotBusinesses("Mountain View",b)
source('~/GitHub/stats290/restaurantR/R/plotBusinesses.R')
plotBusinesses("Mountain View",b)
source('~/GitHub/stats290/restaurantR/R/plotBusinesses.R')
plotBusinesses("Mountain View",b)
source('~/GitHub/stats290/restaurantR/R/plotBusinesses.R')
source('~/GitHub/stats290/restaurantR/R/plotBusinesses.R')
plotBusinesses("Mountain View",b)
source('~/GitHub/stats290/restaurantR/R/plotBusinesses.R')
?stringi::stri_escape_unicode
?stringi::unstri_escape_unicode
?stringi::stri_unescape_unicode
devtools::use_data(NYC_Vegan,overwrite = TRUE)
devtools::use_data(stringi::stri_escape_unicode(NYC_Vegan),overwrite = TRUE)
b=stringi::stri_escape_unicode(NYC_Vegan)
devtools::use_data(b,overwrite = TRUE)
source('~/GitHub/stats290/restaurantR/R/plotBusinesses.R')
NYC_Vegan=b
devtools::use_data(NYC_Vegan,overwrite = TRUE)
source('~/GitHub/stats290/restaurantR/R/plotBusinesses.R')
library(restaurantR)
NYC_Vegan=getRestaurantByDietType("New York","Vegan")
b
source('~/GitHub/stats290/restaurantR/R/plotBusinesses.R')
getAlcoholFriendlyRestaurants("New York", Indian)
getAlcoholFriendlyRestaurants("New York", "Indian")
NYC_vegan=getAlcoholFriendlyRestaurants("New York", "Indian")
devtools::use_data(NYC_Vegan,overwrite = TRUE)
NYC_vegan
library(restaurantR)
source('~/GitHub/stats290/restaurantR/R/plotBusinesses.R')
plotBusinesses("New York",NYC_Vegan)
NYC_vegan
longitude = latitude = NULL
citymap = get_map(location = city , zoom = 15, maptype = "roadmap" , source = "google")
citymap = ggmap(citymap)
citymap = citymap + ggplot2::geom_point(data=businessDF, ggplot2::aes(x=longitude, y=latitude),
color = 'blue',
size = 8, alpha = .6)
businessDF=NYC_vegan
citymap = citymap + ggplot2::geom_point(data=businessDF, ggplot2::aes(x=longitude, y=latitude),
color = 'blue',
size = 8, alpha = .6)
citymap
plotBusinesses("New York",NYC_Vegan)
plotBusinesses("New York",NYC_Vegan)
library(restaurantR)
load(NYC_vegan)
load("NYC_vegan.rda")
devtools::use_data(NYC_Vegan,overwrite = TRUE)
source('~/GitHub/stats290/restaurantR/R/plotBusinesses.R')
plotBusinesses("New York",NYC_vegan)
library(restaurantR)
plotBusinesses("nEW yORK",NYC_Vegan)
rm(NYC_Vegan)
plotBusinesses("nEW yORK",NYC_Vegan)
getAlcoholFriendlyRestaurants("Mountain View","Indian")
source('~/GitHub/stats290/restaurantR/R/getAlcoholFriendlyRestaurants.R')
getAlcoholFriendlyRestaurants("Mountain View","Indian")
MountainView_Indian_Alcohol_Friendly=getAlcoholFriendlyRestaurants("Mountain View","Indian")
devtools::use_data(MountainView_Indian_Alcohol_Friendly)
source('~/GitHub/stats290/restaurantR/R/plotBusinesses.R')
library(restaurantR)
library(restaurantR)
devtools::document()
library(ggplot2)
source('~/GitHub/stats290/restaurantR/R/plotBusinesses.R')
source('~/GitHub/stats290/restaurantR/R/plotBusinesses.R')
source('~/GitHub/stats290/restaurantR/R/plotBusinesses.R')
source('~/GitHub/stats290/restaurantR/R/plotBusinesses.R')
devtools::document()
devtools::document()
library(restaurantR)
devtools::document()
install.packages("curl")
devtools::document()
install.packages('curl')
devtools::document()
devtools::document()
library(restaurantR)
library(restaurantR)
library(restaurantR)
?cbind
library(restaurantR)
environment()
environment
library(restaurantR)
search()
source('~/GitHub/stats290/restaurantR/R/getRestaurantsByMealType.R')
getRestaurantsByMealType("Bellevue","Lunch","Thai")
library(jsonlite)
getRestaurantsByMealType("Bellevue","Lunch","Thai")
getRestaurantsByMealType("Bellevue","Lunch","Thai",TRUE)
getRestaurantsByMealType("Bellevue","Lunch")
source('~/GitHub/stats290/restaurantR/R/getRestaurantsByMealType.R')
source('~/GitHub/stats290/restaurantR/R/getRestaurantsByMealType.R')
source('~/GitHub/stats290/restaurantR/R/getRestaurantByAttireType.R')
source('~/GitHub/stats290/restaurantR/R/getRestaurantByAttireType.R')
getRestaurantByAttireType("San Francisco","business casual","Asian")
source('~/GitHub/stats290/restaurantR/R/getRestaurantByAttireType.R')
getRestaurantByAttireType("San Francisco","business casual","Asian")
getRestaurantByAttireType("Redmond","business casual","Asian")
source('~/GitHub/stats290/restaurantR/R/getRestaurantByAttireType.R')
getRestaurantByPriceRange("San Francisco","moderate","Asian")
source('~/GitHub/stats290/restaurantR/R/getRestaurantByPriceRange.R')
source('~/GitHub/stats290/restaurantR/R/getRestaurantByPriceRange.R')
getRestaurantByPriceRange("San Francisco","moderate","Asian")
source('~/GitHub/stats290/restaurantR/R/getRestaurantsByMealType.R')
source('~/GitHub/stats290/restaurantR/R/getRestaurantByAttireType.R')
source('~/GitHub/stats290/restaurantR/R/getRestaurantByPriceRange.R')
getRestaurantByPriceRange("San Francisco","moderate","Asian")
devtools::document()
source('~/GitHub/stats290/restaurantR/R/getRestaurantByAttireType.R')
getRestaurantsWithWiFi("Mountain View","Indian")
source('~/GitHub/stats290/restaurantR/R/getRestaurantsWithWiFi.R')
getRestaurantsWithWiFi("Mountain View","Indian")
getRestaurantsWithWiFi("Mountain View","Thai")
getRestaurantsWithWiFi("Mountain View","Thai")
source('~/GitHub/stats290/restaurantR/R/getRestaurantsWithWiFi.R')
getRestaurantsWithWiFi("Mountain View","Pizza")
source('~/GitHub/stats290/restaurantR/R/getRestaurantsWithWiFi.R')
getRestaurantsWithWiFi("Atlanta","Pizza")
source('~/GitHub/stats290/restaurantR/R/getCateringRestaurants.R')
source('~/GitHub/stats290/restaurantR/R/getCateringRestaurants.R')
source('~/GitHub/stats290/restaurantR/R/getCateringRestaurants.R')
getCateringRestaurants("San Jose","Indian")
getCateringRestaurants("San Jose","Pakistani")
getCateringRestaurants("San Jose","Afghani")
source('~/GitHub/stats290/restaurantR/R/getCateringRestaurants.R')
source('~/GitHub/stats290/restaurantR/R/getCateringRestaurants.R')
getCateringRestaurants("San Jose","Afghani")
source('~/GitHub/stats290/restaurantR/R/getSmokingFriendlyRestaurants.R')
getSmokingFriendlyRestaurants("Mountain View","Indian")
source('~/GitHub/stats290/restaurantR/R/getSmokingFriendlyRestaurants.R')
getSmokingFriendlyRestaurants("Mountain View","Indian")
getSmokingFriendlyRestaurants("New York","Pizza")
source('~/GitHub/stats290/restaurantR/R/getSmokingFriendlyRestaurants.R')
source('~/GitHub/stats290/restaurantR/R/getSmokingFriendlyRestaurants.R')
source('~/GitHub/stats290/restaurantR/R/getSmokingFriendlyRestaurants.R')
source('~/GitHub/stats290/restaurantR/R/getSmokingFriendlyRestaurants.R')
source('~/GitHub/stats290/restaurantR/R/getSmokingFriendlyRestaurants.R')
source('~/GitHub/stats290/restaurantR/R/getSmokingFriendlyRestaurants.R')
source('~/GitHub/stats290/restaurantR/R/getSmokingFriendlyRestaurants.R')
getSmokingFriendlyRestaurants("Mountain View","Indian")
getSmokingFriendlyRestaurants("New York","Pizza")
source('~/GitHub/stats290/restaurantR/R/getRestaurantsAcceptingReservations.R')
getRestaurantsAcceptingReservations("San Francisco","Asian")
source('~/GitHub/stats290/restaurantR/R/getRestaurantsAcceptingReservations.R')
getRestaurantsAcceptingReservations("San Francisco","Asian")
getRestaurantsAcceptingReservations("San Francisco","Bangladeshi")
warning("No restaurants with selected cuisine that offer ", orderType)
orderType="delivery"
warning("No restaurants with selected cuisine that offer ", orderType)
source('~/GitHub/stats290/restaurantR/R/getRestaurantsWithDeliveryOrTakeOut.R')
getRestaurantsWithDeliveryOrTakeOut("San Francisco","delivery","Indian")
getRestaurantsWithDeliveryOrTakeOut("San Francisco","delivery","Indianla")
getRestaurantsWithDeliveryOrTakeOut("San Francisco","deliveray","Indian")
source('~/GitHub/stats290/restaurantR/R/getRestaurantsWithDeliveryOrTakeOut.R')
source('~/GitHub/stats290/restaurantR/R/getRestaurantsWithDeliveryOrTakeOut.R')
getRestaurantsWithDeliveryOrTakeOut("San Francisco","deliveray","Indian")
source('~/GitHub/stats290/restaurantR/R/getRestaurantsWithDeliveryOrTakeOut.R')
devtools::document()
source('~/GitHub/stats290/restaurantR/R/getWheelChairAccesibleRestaurants.R')
getWheelChairAccesibleRestaurants("San Francisco","Asian")
getWheelChairAccesibleRestaurants("San Francisco")
getRestaurantsWithWiFi("New York")
getRestaurantsWithWiFi("New York")
source('~/GitHub/stats290/restaurantR/R/getRestaurantsAcceptingReservations.R')
getRestaurantsWithWiFi("New York")
source('~/GitHub/stats290/restaurantR/R/getCuisineforCity.R')
getCuisineforCity("San Francisco","Asian")
source('~/GitHub/stats290/restaurantR/R/getCuisineforCity.R')
source('~/GitHub/stats290/restaurantR/R/getCuisineforCity.R')
library(ggmap)
?geocode
devtools::document()
devtools::document()
devtools::document()
library(restaurantR)
