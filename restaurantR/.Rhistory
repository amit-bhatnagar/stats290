warning("No results with the requested attire type")
}
},
error=function(cond) {
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(cond)
# Choose a return value in case of warning
return(NULL)
}
)#tryCatch
return(out)
}
getRestaurantsAcceptingReservations<-function(city, cuisine, full = FALSE){
# factualAPIKey = "mKxC6I9lTWnKNTSNF12e3keaWblCXqoaZ1qROdVo"
factualAPIKey = "Ov7qkrDDdAqLwVneSnZZssSwT8nttVb9urqugaDn"
baseURL <- "http://api.v3.factual.com/t/restaurants-us?"
limit=20
offset=0
if(missing(cuisine)){
cuisine = ""
}
out <- tryCatch(
{
city = gsub(" ","+",city)
USfilter="{\"country\":\"US\"}"
cityFilter = paste0("{\"locality\":{\"$eq\":\"",city,"\"}}")
reservationFilter = "{\"reservations\":{\"$eq\":\"TRUE\"}}"
cuisineFilter = paste0("{\"cuisine\":{\"$includes\":\"",cuisine,"\"}}")
allFilters=paste(cityFilter,reservationFilter,cuisineFilter,sep = ",")
filters=paste0("{\"$and\":[",allFilters,"]}")
URL = paste0(baseURL,"filters=",filters,"&KEY=",factualAPIKey)
getData <- jsonlite::fromJSON(URL, flatten = TRUE)
if(length(getData$response$data)!=0){
fullFactualResponse = as.data.frame(getData$response)
#Make names more easily understandable by dropping "data." that factual attaches
names(fullFactualResponse) <- sub("data.", "\\2", names(fullFactualResponse))
nameLatLong = data.frame(name=fullFactualResponse$name
,longitude=as.double(fullFactualResponse$longitude)
,latitude=as.double(fullFactualResponse$latitude))
if(full)
return(fullFactualResponse)
else
return(nameLatLong)
}
else{
warning("No restaurants with selected cuisine that accept reservations in this location")
}
},
error=function(cond) {
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(cond)
# Choose a return value in case of warning
return(NULL)
}
)#tryCatch
return(out)
}
getRestaurantsByMealType<-function(city, mealType, cuisine, full = FALSE){
if(missing(cuisine)){
cuisine = ""
}
out <- tryCatch(
{
city = gsub(" ","+",city)
factualAPIKey = "mKxC6I9lTWnKNTSNF12e3keaWblCXqoaZ1qROdVo"
mealType = tolower(mealType)
supportedMealTypes =c("lunch","dinner","breakfast")
isMealTypeSupported = any(supportedMealTypes == mealType )
if(!isMealTypeSupported){
warning(paste(mealType,"is not a supported meal type \n"))
warning(paste("Meal should be one of these:\n"))
warning(paste(supportedMealTypes,"\n"))
#return()
}
mealType=paste0("meal_",mealType)
baseURL <- "http://api.v3.factual.com/t/restaurants-us?"
USfilter="{\"country\":\"US\"}"
cityFilter = paste0("{\"locality\":{\"$eq\":\"",city,"\"}}")
mealTypeFilter = paste0("{\"",mealType,"\":{\"$eq\":\"TRUE\"}}")
cuisineFilter = paste0("{\"cuisine\":{\"$includes\":\"",cuisine,"\"}}")
allFilters=paste(cityFilter,mealTypeFilter,cuisineFilter,sep = ",")
filters=paste0("{\"$and\":[",allFilters,"]}")
limit=20
offset=0
URL = paste0(baseURL,"filters=",filters,"&KEY=",factualAPIKey)
getData <- jsonlite::fromJSON(URL, flatten = TRUE)
fullFactualResponse = as.data.frame(getData$response)
#Make names more easily understandable by dropping "data." that factual attaches
names(fullFactualResponse) <- sub("data.", "\\2", names(fullFactualResponse))
nameLatLong = data.frame(name=fullFactualResponse$name
,longitude=as.double(fullFactualResponse$longitude)
,latitude=as.double(fullFactualResponse$latitude))
if(full)
return(fullFactualResponse)
else
return(nameLatLong)
},
error=function(cond) {
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(cond)
# Choose a return value in case of warning
return(NULL)
}
)#tryCatch
return(out)
}
getRestaurantsByMealType<-function(city, mealType, cuisine, full = FALSE){
limit=20
offset=0
factualAPIKey = "mKxC6I9lTWnKNTSNF12e3keaWblCXqoaZ1qROdVo"
baseURL <- "http://api.v3.factual.com/t/restaurants-us?"
if(missing(cuisine)){
cuisine = ""
}
out <- tryCatch(
{
city = gsub(" ","+",city)
mealType = tolower(mealType)
supportedMealTypes =c("lunch","dinner","breakfast")
isMealTypeSupported = any(supportedMealTypes == mealType )
if(!isMealTypeSupported){
warning(paste(mealType,"is not a supported meal type \n"))
warning(paste("Meal should be one of these:\n"))
warning(paste(supportedMealTypes,"\n"))
#return()
}
mealType=paste0("meal_",mealType)
USfilter="{\"country\":\"US\"}"
cityFilter = paste0("{\"locality\":{\"$eq\":\"",city,"\"}}")
mealTypeFilter = paste0("{\"",mealType,"\":{\"$eq\":\"TRUE\"}}")
cuisineFilter = paste0("{\"cuisine\":{\"$includes\":\"",cuisine,"\"}}")
allFilters=paste(cityFilter,mealTypeFilter,cuisineFilter,sep = ",")
filters=paste0("{\"$and\":[",allFilters,"]}")
URL = paste0(baseURL,"filters=",filters,"&KEY=",factualAPIKey)
getData <- jsonlite::fromJSON(URL, flatten = TRUE)
fullFactualResponse = as.data.frame(getData$response)
#Make names more easily understandable by dropping "data." that factual attaches
names(fullFactualResponse) <- sub("data.", "\\2", names(fullFactualResponse))
nameLatLong = data.frame(name=fullFactualResponse$name
,longitude=as.double(fullFactualResponse$longitude)
,latitude=as.double(fullFactualResponse$latitude))
if(full)
return(fullFactualResponse)
else
return(nameLatLong)
},
error=function(cond) {
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(cond)
# Choose a return value in case of warning
return(NULL)
}
)#tryCatch
return(out)
}
getRestaurantsNearLocation<-function(pointName, category){
limit=20
offset=0
factualAPIKey = "mKxC6I9ldeTWnKNTSNF12e3keaWblCXqoaZ1qROdVo"
out <- tryCatch(
{
pointLatLong = ggmap::geocode(pointName)
pointLatLong = paste(pointLatLong[2],pointLatLong[1],sep = ",")
locURL <- paste0("http://api.v3.factual.com/t/places?geo={\"$circle\":{\"$center\":[",pointLatLong,"],\"$meters\": 5000}}")
category = gsub(" ","+",category)
categoryFilter = paste0("{\"category_labels\":{\"$includes\":\"",category,"\"}}")
filters=paste0("{\"$and\":[",categoryFilter,"]}")
URL=paste0(locURL,"&filters=",filters,"&limit=",limit,"&offset=",offset,"&KEY=",factualAPIKey)
# #    getData <- jsonlite::fromJSON(URL, flatten = TRUE)
#   df1 = as.data.frame(getData$response)
#
#   df2 = cbind(name=df1$data.name,longitude=df1$data.longitude,latitude=df1$data.latitude)
#   df2 = as.data.frame(df2)
},
error=function(cond) {
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(cond)
# Choose a return value in case of warning
return(NULL)
}
)#tryCatch
return(out)
}
getRestaurantsWithDeliveryOrTakeOut<-function(city, orderType, cuisine, full = FALSE){
factualAPIKey = "mKxC6I9lTWnKNTSNF12e3keaWblCXqoaZ1qROdVo"
baseURL <- "http://api.v3.factual.com/t/restaurants-us?"
limit=20
offset=0
if(missing(cuisine)){
cuisine = ""
}
out <- tryCatch(
{
city = gsub(" ","+",city)
orderType = tolower(orderType)
supportedOrderTypes =c("delivery","takeout")
isOrderTypeSupported = any(supportedOrderTypes == orderType )
if(!isOrderTypeSupported){
warning(paste(orderType,"is not a supported order type \n"))
warning(paste("Meal should be one of these:\n"))
warning(paste(supportedOrderTypes,"\n"))
#return()
}
if(orderType == "delivery")
orderType="meal_deliver"
else orderType="meal_takeout"
USfilter="{\"country\":\"US\"}"
cityFilter = paste0("{\"locality\":{\"$eq\":\"",city,"\"}}")
orderTypeFilter = paste0("{\"",orderType,"\":{\"$eq\":\"TRUE\"}}")
cuisineFilter = paste0("{\"cuisine\":{\"$includes\":\"",cuisine,"\"}}")
allFilters=paste(cityFilter,orderTypeFilter,cuisineFilter,sep = ",")
filters=paste0("{\"$and\":[",allFilters,"]}")
URL = paste0(baseURL,"filters=",filters,"&KEY=",factualAPIKey)
getData <- jsonlite::fromJSON(URL, flatten = TRUE)
if(length(getData$response$data)!=0){
fullFactualResponse = as.data.frame(getData$response)
#Make names more easily understandable by dropping "data." that factual attaches
names(fullFactualResponse) <- sub("data.", "\\2", names(fullFactualResponse))
nameLatLong = data.frame(name=fullFactualResponse$name
,longitude=as.double(fullFactualResponse$longitude)
,latitude=as.double(fullFactualResponse$latitude))
if(full)
fullFactualResponse
else
nameLatLong
}
else{
warning("No restaurants with selected cuisine that offer ", orderType)
}
},
error=function(cond) {
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(cond)
# Choose a return value in case of warning
return(NULL)
}
)#tryCatch
return(out)
}
getSmokingFriendlyRestaurants<-function(city, cuisine, full = FALSE){
factualAPIKey = "mKxC6I9lTWnKNTSNF12e3keaWblCXqoaZ1qROdVo"
baseURL <- "http://api.v3.factual.com/t/restaurants-us?"
limit=20
offset=0
out <- tryCatch(
{
if(missing(cuisine)){
cuisine = ""
}
city = gsub(" ","+",city)
USfilter="{\"country\":\"US\"}"
cityFilter = paste0("{\"locality\":{\"$eq\":\"",city,"\"}}")
smokingFilter = "{\"smoking\":{\"$eq\":\"TRUE\"}}"
cuisineFilter = paste0("{\"cuisine\":{\"$includes\":\"",cuisine,"\"}}")
allFilters=paste(cityFilter,smokingFilter,cuisineFilter,sep = ",")
filters=paste0("{\"$and\":[",allFilters,"]}")
URL = paste0(baseURL,"filters=",filters,"&KEY=",factualAPIKey)
getData <- jsonlite::fromJSON(URL, flatten = TRUE)
if(length(getData$response$data)!=0){
fullFactualResponse = as.data.frame(getData$response)
#Make names more easily understandable by dropping "data." that factual attaches
names(fullFactualResponse) <- sub("data.", "\\2", names(fullFactualResponse))
nameLatLong = data.frame(name=fullFactualResponse$name
,longitude=as.double(fullFactualResponse$longitude)
,latitude=as.double(fullFactualResponse$latitude))
if(full)
return(fullFactualResponse)
else
return(nameLatLong)
}
else{
warning("No restaurants with selected cuisinethat allow smoking in this location")
}
},
error=function(cond) {
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(cond)
# Choose a return value in case of warning
return(NULL)
}
)#tryCatch
return(out)
}
getWheelChairAccesibleRestaurants<-function(city, cuisine, full = FALSE){
factualAPIKey = "mKxC6I9lTWnKNTSNF12e3keaWblCXqoaZ1qROdVo"
baseURL <- "http://api.v3.factual.com/t/restaurants-us?"
limit=20
offset=0
out <- tryCatch(
{
if(missing(cuisine)){
cuisine = ""
}
city = gsub(" ","+",city)
USfilter="{\"country\":\"US\"}"
cityFilter = paste0("{\"locality\":{\"$eq\":\"",city,"\"}}")
wheelChairFilter = "{\"accessible_wheelchair\":{\"$eq\":\"TRUE\"}}"
cuisineFilter = paste0("{\"cuisine\":{\"$includes\":\"",cuisine,"\"}}")
allFilters=paste(cityFilter,wheelChairFilter,cuisineFilter,sep = ",")
filters=paste0("{\"$and\":[",allFilters,"]}")
URL = paste0(baseURL,"filters=",filters,"&KEY=",factualAPIKey)
getData <- jsonlite::fromJSON(URL, flatten = TRUE)
if(length(getData$response$data)!=0){
fullFactualResponse = as.data.frame(getData$response)
#Make names more easily understandable by dropping "data." that factual attaches
names(fullFactualResponse) <- sub("data.", "\\2", names(fullFactualResponse))
nameLatLong = data.frame(name=fullFactualResponse$name
,longitude=as.double(fullFactualResponse$longitude)
,latitude=as.double(fullFactualResponse$latitude))
if(full)
fullFactualResponse
else
nameLatLong
}
else{
warning("No restaurants with selected cuisine that are wheelchair-accessible")
}
},
error=function(cond) {
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(cond)
# Choose a return value in case of warning
return(NULL)
}
)#tryCatch
return(out)
}
mapQueryCountByUSState<-function(chainCountByState){
out <- tryCatch(
{
group = long = lat = longitude = latitude = NULL
names(chainCountByState) = toupper(names(chainCountByState))
#Factual names Indian as "IN.". Renaming this to "IN" for consistency
colnames(chainCountByState)[which(names(chainCountByState)=="IN.")] = "IN"
#Drop DC as it does not appear in the list of 50 states in R
chainCountByState=chainCountByState[names(chainCountByState) != "DC" ]
tempDF = data.frame(t((tempVal=rep(0,50))))
names(tempDF)=state.abb
chainCountByState <- rbind.fill(chainCountByState,tempDF)
chainCountByState=chainCountByState[,order(names(chainCountByState))]
#Replace NA by 0
chainCountByState[is.na(chainCountByState)] <- 0
chainCountByState=t(chainCountByState[1,])
states <- data.frame(region = tolower(state.name),latitude=state.center$y,longitude=state.center$x)
rownames(states) <-state.abb
chainDataWithLatLong = cbind(states,chainCountByState)
us_state_map <- map_data('state')
finalData <- merge(chainDataWithLatLong, us_state_map, by = 'region')
displayMap <- ggplot(data = finalData, ggplot2::aes(x = long, y = lat, group = group))
# displayMap <- displayMap + geom_polygon(aes(fill = cut_number(as.numeric(chainCountByState[,1]),5)), show.legend = FALSE)
displayMap <- displayMap + ggplot2::geom_polygon (show.legend = FALSE)
displayMap <- displayMap + ggplot2::geom_path(colour = 'goldenrod1', linemitre  = 2)
displayMap <- displayMap + ggplot2::coord_map()
displayMap <- displayMap + ggplot2::geom_text(data = chainDataWithLatLong, ggplot2::aes(x = longitude, y = latitude, label = chainCountByState, group=NULL, fontface = "bold"))
displayMap <- displayMap + ggplot2::theme_bw()
return(displayMap)
},
error=function(cond) {
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(cond)
# Choose a return value in case of warning
return(NULL)
}
)#tryCatch
return(out)
}
plotBusinesses <-function(city, businessDF){
# library(ggmap)
out <- tryCatch(
{
longitude = latitude = NULL
citymap = get_map(location = city , zoom = 15, maptype = "roadmap" , source = "google")
citymap = ggmap(citymap)
citymap = citymap + ggplot2::geom_point(data=businessDF, ggplot2::aes(x=longitude, y=latitude),
color = 'blue',
size = 8, alpha = .6)
#citymap = citymap  +    ggplot2::geom_text(ggplot2::aes(label=name), data=businessDF, hjust=-1,
# fontface = 'bold',check_overlap = TRUE)
citymap
},
error=function(cond) {
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(cond)
# Choose a return value in case of warning
return(NULL)
}
)#tryCatch
return(out)
}
plotQueryComparisonByState<-function(query1, query2){
#Setting variables to NULL to avoid NOTES in devtools::check
lat = long = latitude = longitude = group = NULL
out <- tryCatch(
{
winner = compareQueriesByState(query1, query2)
color <- ifelse(winner==query1,"red","green")
winnerDF = as.data.frame(winner)
winnerDF$color=color
states <- data.frame(region = tolower(state.name),latitude=state.center$y,longitude=state.center$x)
rownames(states) <-state.abb
chainDataWithLatLong = cbind(states,winnerDF)
us_state_map <- ggplot2::map_data('state')
finalData <- merge(chainDataWithLatLong, us_state_map, by = 'region')
displayMap <- ggplot2::ggplot(data = finalData, ggplot2::aes(x = long, y = lat, group = group))
displayMap <- displayMap + ggplot2::geom_polygon(ggplot2::aes(fill = color), show.legend = FALSE)
displayMap <- displayMap + ggplot2::geom_path(colour = 'goldenrod1', linemitre  = 2)
displayMap <- displayMap + ggplot2::coord_map()
displayMap <- displayMap + ggplot2::geom_text(data = chainDataWithLatLong,
ggplot2::aes(x = longitude, y = latitude, label = winner, group=NULL, fontface = "bold"),
check_overlap = TRUE)
displayMap <- displayMap + ggplot2::theme_dark()
return(displayMap)
},
error=function(cond) {
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(cond)
# Choose a return value in case of warning
return(NULL)
}
)#tryCatch
return(out)
}
devtools::document("RestaurantR")
compareQueriesByState<-function(query1, query2){
out <- tryCatch(
{
df1 <- getQueryCountByUSState(query1)
df2 <- getQueryCountByUSState(query2)
compare = cbind(df1, df2)
return(ifelse(compare[,1] > compare[,2],query1, query2))
}
error=function(cond) {
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(cond)
# Choose a return value in case of warning
return(NULL)
}
)#tryCatch
return(out)
}
devtools::document("RestaurantR")
compareQueriesByState<-function(query1, query2){
out <- tryCatch(
{
df1 <- getQueryCountByUSState(query1)
df2 <- getQueryCountByUSState(query2)
compare = cbind(df1, df2)
return(ifelse(compare[,1] > compare[,2],query1, query2))
},
error=function(cond) {
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(cond)
# Choose a return value in case of warning
return(NULL)
}
)#tryCatch
return(out)
}
devtools::document("RestaurantR")
devtools::document("RestaurantR")
