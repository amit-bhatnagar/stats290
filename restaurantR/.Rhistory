row.names(restaurantDF[[i+1]]) <- seq(offset+1,offset+limit,1)
}
#Trace a = sapply(restaurantDF, function(x) print(dim(x)))
#Trace print(a)
#Trace sapply(restaurantDF, print(dim))
restaurantDF <- lapply(restaurantDF,private$NormalizeColumns)
#Trace a = sapply(restaurantDF, function(x) print(dim(x)))
#Trace print(a)
restaurantDF <- rbind.fill(restaurantDF[[1]],restaurantDF[[2]],restaurantDF[[3]],restaurantDF[[4]],restaurantDF[[5]],restaurantDF[[6]],restaurantDF[[7]],restaurantDF[[8]],restaurantDF[[9]],restaurantDF[[10]])
restaurantDF[,"businesses.aggregaterating"] <- as.numeric(restaurantDF[,"businesses.rating"])* as.numeric(restaurantDF[,"businesses.review_count"])
restaurantDF_sorted <- restaurantDF[order(-restaurantDF[,"businesses.aggregaterating"]), ]
private$data <- restaurantDF_sorted
return(private$data)
#return(restaurantDF_sorted)
#return(restaurantDF)
},
error=function(cond) {
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(cond)
# Choose a return value in case of warning
return(NULL)
}
)#tryCatch
return(out)
},
#This method shortlists restaurants pertaining to a specific cusine in a given location
#It retrieves 6 restaurants that match the specified criteria displaying necessary information such as the name, ph, url, rating
# and review of the restaurant
#If city or state is not specified, ressults default to United States
#If cusine is not specified, all restaurants that serve food as returned by yelp will be retrieved
shortlistRestaurants = function(city = "any", state ="any", cusine="any")
{
out <- tryCatch(
{
city = URLencode(city)
state = URLencode(state)
cusine = URLencode(cusine)
restaurantDF = self$queryData(city, state, cusine)
restaurantDF.shortlist = head(restaurantDF)
shortlistColumns <- c("businesses.name", "businesses.display_phone", "businesses.url", "businesses.rating","businesses.review_count")
restaurantDF.shortlist <- restaurantDF.shortlist[shortlistColumns]
private$data <- restaurantDF.shortlist
return(private$data)
},
error=function(cond) {
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(cond)
# Choose a return value in case of warning
return(NULL)
}
)#tryCatch
return(out)
}
)
)
restaurantObj <- yelpR$new()
restaurantObj$InitializeYelp()
restaurantDF = restaurantObj$queryData("Stanford","CA","Indian")
restaurantDF = restaurantObj$shortlistRestaurants("San%20Jose","CA","Indian")
print(restaurantDF)
restaurantDF = restaurantObj$shortlistRestaurants("Napa Valley","CA","Italian")
print(restaurantDF)
restaurantDF = restaurantObj$queryData("Stanford","CA","Indian")
head(restaurantDF)$businesses.name
restaurantDF = restaurantObj$shortlistRestaurants("Sacramento","CA","Indian")
restaurantDF = restaurantObj$shortlistRestaurants("Sunnywale","CA","Indian")
print(restaurantDF)
restaurantDF = restaurantObj$shortlistRestaurants("Sunnywale","CA","Ethiopian")
restaurantDF = restaurantObj$shortlistRestaurants("Sunnyvale","CA","Ethiopian")
View(restaurantDF.shortlist)
restaurantDF = restaurantObj$queryData("Stanford","CA","Indian")
names(restaurantDF)
restaurantDF$businesses.deals
is.null(restaurantDF$businesses.deals)
restaurantDF$businesses.deals
View(restaurantDF)
restaurantDF = restaurantDF[!is.null(DF$businesses.deals),]
restaurantDF = restaurantDF[!is.null(DF["businesses.deals"],]
View(restaurantDF)
restaurantDF = restaurantDF[!is.null(DF["businesses.deals"],]
names(restaurantDF)
restaurantDF = restaurantDF[!is.null(DF[26],]
restaurantDF = restaurantDF[!is.null(DF$\"businesses.deals\",]
restaurantDF["businesses.deals"]
restaurantDF["businesses.deals",]
is.null(restaurantDF$businesses.deals)
restaurantDF$businesses.deals
na.omit(restaurantDF$businesses.deals)
restaurantDF[!(is.null(restaurantDF$businesses.deals) | restaurantDF$businesses.deals==""), ]
df = restaurantDF[!(is.null(restaurantDF$businesses.deals) | restaurantDF$businesses.deals==""), ]
df = restaurantDF[!(is.null(restaurantDF$businesses.deals)), ]
View(df)
df = restaurantDF[!(is.null(restaurantDF$businesses.deals) | restaurantDF$businesses.deals == 'NULL'), ]
View(df)
yelpR <- R6Class("yelpR",
private = list(
data = NA,
consumerKey = NA,
consumerSecret = NA,
token = NA,
token_secret = NA,
NormalizeColumns = function(df)
{
drops <- drops <- c("businesses.location")#"businesses.gift_certificates","businesses.deals",
df <- df[ , !(names(df) %in% drops)]
}
),
public = list(
InitializeYelp = function(consumerKey="ASkXlev4NL0jpvX2RuUMhw", consumerSecret="F1W_k2qrZRRfKcMXIltlDG1fdEY", token = "vynHw9DBQqeR4y-VEqby0eFce2LiFUM3", token_secret="uflhgBEYKMHe0KXA9POlzgEs9EM")
{
print("Choose oauthtype, ")
out <- tryCatch(
{
#Establish connection to yelp
print("Connecting to yelp.  If you are establishing yelp connection for first time,at the prompt to choose an auth type, select option 1. Otherwise you are good to go.")
myapp <<- oauth_app("YELP", key=consumerKey, secret=consumerSecret)
sig <<- sign_oauth1.0(myapp, token=token,token_secret=token_secret)
private$consumerKey <- consumerKey
private$consumerSecret <- consumerSecret
private$token <- token
private$token_secret <- token_secret
return(TRUE)
},
error=function(cond) {
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(cond)
# Choose a return value in case of warning
return(NULL)
},
finally={
# NOTE:
# Here goes everything that should be executed at the end,
# regardless of success or error.
# If you want more than one expression to be executed, then you
# need to wrap them in curly brackets ({...}); otherwise you could
# just have written 'finally=<expression>'
message("Processed yelp connection")
}
)
return(out)
},
getData = function() private$data,
#This method search for restaurants pertaining to a specific cusine in a given location
#If city or state is not specified, ressults default to United States
#If cusine is not specified, all restaurants that serve food as returned by yelp will be retrieved
queryData = function(city = "any", state ="any", cusine="any")
{
restaurantDF <- list()
out <- tryCatch(
{
#Handle numeric input
if(is.numeric(city) || is.numeric(state) || is.numeric(cusine))
{
stop("Error: Input parameters needs to be string, You have specified numeric input")
}
#NULL handle
if(is.null(city) || is.na(city) || is.nan(city))
city = "any"
if(is.null(state) || is.na(state) || is.nan(state))
state = "any"
if(is.null(cusine) || is.na(cusine) || is.nan(cusine))
cusine = "any"
city = URLencode(city)
state = URLencode(state)
cusine = URLencode(cusine)
for(i in 0:9)
{
limit <- 20
offset <- i*limit
if(city =="any" || state == "any")
{
if(cusine != "any")
{
#Cusine specified.
if(city != "any") #Use city as the location if it is specified
yelpURL <- paste0("http://api.yelp.com/v2/search/?limit=",limit,"&offset=",offset,"&location=",city,"&term=",cusine)
else if(state != "any") #use state as the location if it is specified
yelpURL <- paste0("http://api.yelp.com/v2/search/?limit=",limit,"&offset=",offset,"&location=",state,"&term=",cusine)
else #Default to US as the location since neither city nor state is specified
yelpURL <- paste0("http://api.yelp.com/v2/search/?limit=",limit,"&offset=",offset,"&location=US&term=",cusine)
}
else
{
#Cusine is not specified. Default to food as the search term
if(city != "any") #Use city as the location if it is specified
yelpURL <- paste0("http://api.yelp.com/v2/search/?limit=",limit,"&offset=",offset,"&location=",city,"&term=food")
else if(state != "any") #use state as the location if it is specified
yelpURL <- paste0("http://api.yelp.com/v2/search/?limit=",limit,"&offset=",offset,"&location=",state,"&term=food")
else
yelpURL <- paste0("http://api.yelp.com/v2/search/?limit=",limit,"&offset=",offset,"&location=US&term=food")
}
}
else
{
yelpURL <- paste0("http://api.yelp.com/v2/search/?limit=",limit,"&offset=",offset,"&location=",city,"%20",state,"&term=",cusine)
}
yelpURL <- URLencode(yelpURL)
#Trace print(yelpURL)
yelpData <- GET(yelpURL, sig)
yelpDataContent <- content(yelpData)
yelpDataList <- jsonlite::fromJSON(toJSON(yelpDataContent))
#TRACE head(data.frame(yelpDataList))
restaurantDF[[i+1]] <-  (data.frame(yelpDataList,dup.row.names=FALSE))
row.names(restaurantDF[[i+1]]) <- seq(offset+1,offset+limit,1)
}
#Trace a = sapply(restaurantDF, function(x) print(dim(x)))
#Trace print(a)
#Trace sapply(restaurantDF, print(dim))
restaurantDF <- lapply(restaurantDF,private$NormalizeColumns)
#Trace a = sapply(restaurantDF, function(x) print(dim(x)))
#Trace print(a)
restaurantDF <- rbind.fill(restaurantDF[[1]],restaurantDF[[2]],restaurantDF[[3]],restaurantDF[[4]],restaurantDF[[5]],restaurantDF[[6]],restaurantDF[[7]],restaurantDF[[8]],restaurantDF[[9]],restaurantDF[[10]])
restaurantDF[,"businesses.aggregaterating"] <- as.numeric(restaurantDF[,"businesses.rating"])* as.numeric(restaurantDF[,"businesses.review_count"])
restaurantDF_sorted <- restaurantDF[order(-restaurantDF[,"businesses.aggregaterating"]), ]
private$data <- restaurantDF_sorted
return(private$data)
#return(restaurantDF_sorted)
#return(restaurantDF)
},
error=function(cond) {
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(cond)
# Choose a return value in case of warning
return(NULL)
}
)#tryCatch
return(out)
},
#This method shortlists restaurants pertaining to a specific cusine in a given location
#It retrieves 6 restaurants that match the specified criteria displaying necessary information such as the name, ph, url, rating
# and review of the restaurant
#If city or state is not specified, ressults default to United States
#If cusine is not specified, all restaurants that serve food as returned by yelp will be retrieved
shortlistRestaurants = function(city = "any", state ="any", cusine="any")
{
out <- tryCatch(
{
restaurantDF = self$queryData(city, state, cusine)
restaurantDF = head(restaurantDF)
shortlistColumns <- c("businesses.name", "businesses.display_phone", "businesses.url", "businesses.rating","businesses.review_count")
restaurantDF <- restaurantDF[shortlistColumns]
private$data <- restaurantDF
return(private$data)
},
error=function(cond) {
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(cond)
# Choose a return value in case of warning
return(NULL)
}
)#tryCatch
return(out)
},
getRestaurantWithDeals = function(city = "any", state ="any", cusine="any")
{
out <- tryCatch(
{
restaurantDF = self$queryData(city, state, cusine)
restaurantDF = restaurantDF[!(is.null(restaurantDF$businesses.deals) | restaurantDF$businesses.deals == 'NULL'), ]
private$data <- restaurantDF
return(private$data)
},
error=function(cond) {
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(cond)
# Choose a return value in case of warning
return(NULL)
}
)#tryCatch
return(out)
}
)
)
restaurantObj <- yelpR$new()
restaurantObj$InitializeYelp()
restaurantDF = restaurantObj$queryData("Stanford","CA","Indian")
restaurantDF = restaurantObj$getRestaurantWithDeals("San Francisco","CA","Indian")
restaurantDF = restaurantObj$getRestaurantWithDeals("San%20Francisco","CA","Indian")
url <- "http://api.v3.factual.com/t/restaurants-us?geo={"$circle":{"$center":[33.6518297,-117.8389422],"$meters": 5000}}&filters={"$and":[{"cuisine":{"$includes":"pizza"}}]}&limit=20&offset=0&KEY=mKxC6I9lTWnKNTSNF12e3keaWblCXqoaZ1qROdVo"
URL <- "http://api.v3.factual.com/t/restaurants-us?geo={"$circle":{"$center":[33.6518297,-117.8389422],"$meters": 5000}}&filters={"$and":[{"cuisine":{"$includes":"pizza"}}]}&limit=20&offset=0&KEY=mKxC6I9lTWnKNTSNF12e3keaWblCXqoaZ1qROdVo"
yelpR <- R6Class("yelpR",
private = list(
data = NA,
consumerKey = NA,
consumerSecret = NA,
token = NA,
token_secret = NA,
NormalizeColumns = function(df)
{
drops <- drops <- c("businesses.location")#"businesses.gift_certificates","businesses.deals",
df <- df[ , !(names(df) %in% drops)]
}
),
public = list(
InitializeYelp = function(consumerKey="ASkXlev4NL0jpvX2RuUMhw", consumerSecret="F1W_k2qrZRRfKcMXIltlDG1fdEY", token = "vynHw9DBQqeR4y-VEqby0eFce2LiFUM3", token_secret="uflhgBEYKMHe0KXA9POlzgEs9EM")
{
print("Choose oauthtype, ")
out <- tryCatch(
{
#Establish connection to yelp
print("Connecting to yelp.  If you are establishing yelp connection for first time,at the prompt to choose an auth type, select option 1. Otherwise you are good to go.")
myapp <<- oauth_app("YELP", key=consumerKey, secret=consumerSecret)
sig <<- sign_oauth1.0(myapp, token=token,token_secret=token_secret)
private$consumerKey <- consumerKey
private$consumerSecret <- consumerSecret
private$token <- token
private$token_secret <- token_secret
return(TRUE)
},
error=function(cond) {
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(cond)
# Choose a return value in case of warning
return(NULL)
},
finally={
# NOTE:
# Here goes everything that should be executed at the end,
# regardless of success or error.
# If you want more than one expression to be executed, then you
# need to wrap them in curly brackets ({...}); otherwise you could
# just have written 'finally=<expression>'
message("Processed yelp connection")
}
)
return(out)
},
getData = function() private$data,
#This method search for restaurants pertaining to a specific cusine in a given location
#If city or state is not specified, ressults default to United States
#If cusine is not specified, all restaurants that serve food as returned by yelp will be retrieved
queryData = function(city = "any", state ="any", cusine="any")
{
restaurantDF <- list()
out <- tryCatch(
{
#Handle numeric input
if(is.numeric(city) || is.numeric(state) || is.numeric(cusine))
{
stop("Error: Input parameters needs to be string, You have specified numeric input")
}
#NULL handle
if(is.null(city) || is.na(city) || is.nan(city))
city = "any"
if(is.null(state) || is.na(state) || is.nan(state))
state = "any"
if(is.null(cusine) || is.na(cusine) || is.nan(cusine))
cusine = "any"
for(i in 0:9)
{
limit <- 20
offset <- i*limit
if(city =="any" || state == "any")
{
if(cusine != "any")
{
#Cusine specified.
if(city != "any") #Use city as the location if it is specified
yelpURL <- paste0("http://api.yelp.com/v2/search/?limit=",limit,"&offset=",offset,"&location=",city,"&term=",cusine)
else if(state != "any") #use state as the location if it is specified
yelpURL <- paste0("http://api.yelp.com/v2/search/?limit=",limit,"&offset=",offset,"&location=",state,"&term=",cusine)
else #Default to US as the location since neither city nor state is specified
yelpURL <- paste0("http://api.yelp.com/v2/search/?limit=",limit,"&offset=",offset,"&location=US&term=",cusine)
}
else
{
#Cusine is not specified. Default to food as the search term
if(city != "any") #Use city as the location if it is specified
yelpURL <- paste0("http://api.yelp.com/v2/search/?limit=",limit,"&offset=",offset,"&location=",city,"&term=food")
else if(state != "any") #use state as the location if it is specified
yelpURL <- paste0("http://api.yelp.com/v2/search/?limit=",limit,"&offset=",offset,"&location=",state,"&term=food")
else
yelpURL <- paste0("http://api.yelp.com/v2/search/?limit=",limit,"&offset=",offset,"&location=US&term=food")
}
}
else
{
yelpURL <- paste0("http://api.yelp.com/v2/search/?limit=",limit,"&offset=",offset,"&location=",city,"%20",state,"&term=",cusine)
}
yelpURL <- URLencode(yelpURL)
#Trace print(yelpURL)
yelpData <- GET(yelpURL, sig)
yelpDataContent <- content(yelpData)
yelpDataList <- jsonlite::fromJSON(toJSON(yelpDataContent))
#TRACE head(data.frame(yelpDataList))
restaurantDF[[i+1]] <-  (data.frame(yelpDataList,dup.row.names=FALSE))
row.names(restaurantDF[[i+1]]) <- seq(offset+1,offset+limit,1)
}
#Trace a = sapply(restaurantDF, function(x) print(dim(x)))
#Trace print(a)
#Trace sapply(restaurantDF, print(dim))
restaurantDF <- lapply(restaurantDF,private$NormalizeColumns)
#Trace a = sapply(restaurantDF, function(x) print(dim(x)))
#Trace print(a)
restaurantDF <- rbind.fill(restaurantDF[[1]],restaurantDF[[2]],restaurantDF[[3]],restaurantDF[[4]],restaurantDF[[5]],restaurantDF[[6]],restaurantDF[[7]],restaurantDF[[8]],restaurantDF[[9]],restaurantDF[[10]])
restaurantDF[,"businesses.aggregaterating"] <- as.numeric(restaurantDF[,"businesses.rating"])* as.numeric(restaurantDF[,"businesses.review_count"])
restaurantDF_sorted <- restaurantDF[order(-restaurantDF[,"businesses.aggregaterating"]), ]
private$data <- restaurantDF_sorted
return(private$data)
#return(restaurantDF_sorted)
#return(restaurantDF)
},
error=function(cond) {
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(cond)
# Choose a return value in case of warning
return(NULL)
}
)#tryCatch
return(out)
},
#This method shortlists restaurants pertaining to a specific cusine in a given location
#It retrieves 6 restaurants that match the specified criteria displaying necessary information such as the name, ph, url, rating
# and review of the restaurant
#If city or state is not specified, ressults default to United States
#If cusine is not specified, all restaurants that serve food as returned by yelp will be retrieved
shortlistRestaurants = function(city = "any", state ="any", cusine="any")
{
out <- tryCatch(
{
city = URLencode(city)
state = URLencode(state)
cusine = URLencode(cusine)
restaurantDF = self$queryData(city, state, cusine)
restaurantDF = head(restaurantDF)
shortlistColumns <- c("businesses.name", "businesses.display_phone", "businesses.url", "businesses.rating","businesses.review_count")
restaurantDF <- restaurantDF[shortlistColumns]
private$data <- restaurantDF
return(private$data)
},
error=function(cond) {
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(cond)
# Choose a return value in case of warning
return(NULL)
}
)#tryCatch
return(out)
},
getRestaurantWithDeals = function(city = "any", state ="any", cusine="any")
{
out <- tryCatch(
{
city = URLencode(city)
state = URLencode(state)
cusine = URLencode(cusine)
restaurantDF = self$queryData(city, state, cusine)
restaurantDF = restaurantDF[!(is.null(restaurantDF$businesses.deals) | restaurantDF$businesses.deals == 'NULL'), ]
private$data <- restaurantDF
return(private$data)
},
error=function(cond) {
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(cond)
# Choose a return value in case of warning
return(NULL)
}
)#tryCatch
return(out)
}
)
)
restaurantObj <- yelpR$new()
restaurantObj$InitializeYelp()
restaurantDF = restaurantObj$queryData("Stanford","CA","Indian")
head(restaurantDF)$businesses.name
restaurantDF = restaurantObj$getRestaurantWithDeals("San%20Francisco","CA","Indian")
restaurantDF
View(restaurantDF)
head(restaurantDF)$businesses.name
restaurantDF = restaurantObj$getRestaurantWithDeals("San Francisco","CA","Indian")
head(restaurantDF)$businesses.name
